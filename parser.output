Terminals unused in grammar

   AND
   OR


State 10 conflicts: 1 shift/reduce
State 16 conflicts: 12 shift/reduce
State 26 conflicts: 13 shift/reduce
State 40 conflicts: 12 shift/reduce, 15 reduce/reduce
State 98 conflicts: 12 shift/reduce
State 103 conflicts: 12 shift/reduce
State 104 conflicts: 4 shift/reduce
State 108 conflicts: 13 shift/reduce
State 111 conflicts: 13 shift/reduce
State 120 conflicts: 12 shift/reduce
State 126 conflicts: 12 shift/reduce
State 127 conflicts: 13 shift/reduce
State 128 conflicts: 12 shift/reduce
State 131 conflicts: 13 shift/reduce
State 133 conflicts: 13 shift/reduce
State 134 conflicts: 12 shift/reduce
State 139 conflicts: 13 shift/reduce
State 145 conflicts: 12 shift/reduce
State 146 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: headers vsa '(' ')' '{' body return '}'

    2 headers: headers headers

    3 $@1: /* empty */

    4 headers: INCLUDE $@1

    5 vsa: datatype ID

    6 datatype: INT
    7         | FLOAT
    8         | CHAR
    9         | VOID

   10 $@2: /* empty */

   11 body: FOR $@2 '(' aux1 ';' condition ';' aux1 ')' '{' body '}'

   12 $@3: /* empty */

   13 body: WHILE $@3 '(' condition ')' '{' body '}'

   14 $@4: /* empty */

   15 body: IF $@4 '(' condition ')' '{' body '}' elif

   16 $@5: /* empty */

   17 body: SWITCH $@5 '(' alpha ')' '{' case '}'
   18     | statement ';'
   19     | body body

   20 $@6: /* empty */

   21 body: PRINTFF $@6 '(' STR ')' ';'

   22 $@7: /* empty */

   23 body: SCANFF $@7 '(' STR ',' '&' ID ')' ';'
   24     | /* empty */

   25 alpha: NUMBER
   26      | ID

   27 $@8: /* empty */

   28 case: CASE $@8 NUMBER ':' body BREAK ';' case

   29 $@9: /* empty */

   30 case: DEFAULT $@9 ':' body BREAK ';'

   31 aux1: statement
   32     | /* empty */

   33 $@10: /* empty */

   34 elif: ELIF $@10 '(' condition ')' '{' body '}' elif

   35 $@11: /* empty */

   36 elif: ELSE $@11 '{' body '}'
   37     | /* empty */

   38 condition: value relop value
   39          | TRUE
   40          | FALSE

   41 $@12: /* empty */

   42 statement: datatype ID $@12 init

   43 $@13: /* empty */

   44 statement: ID $@13 '=' expression

   45 $@14: /* empty */

   46 statement: ID $@14 relop expression

   47 $@15: /* empty */

   48 statement: ID $@15 UNARY
   49          | UNARY ID

   50 init: '=' value
   51     | /* empty */

   52 expression: expression arithmetic expression
   53           | value

   54 arithmetic: ADD
   55           | SUBTRACT
   56           | MULTIPLY
   57           | DIVIDE

   58 relop: LT
   59      | GT
   60      | LE
   61      | GE
   62      | EQ
   63      | NE

   64 value: NUMBER
   65      | FLOAT_NUM
   66      | CHARACTER
   67      | ID

   68 $@16: /* empty */

   69 return: RETURN $@16 value ';'


Terminals, with rules where they appear

$end (0) 0
'&' (38) 23
'(' (40) 1 11 13 15 17 21 23 34
')' (41) 1 11 13 15 17 21 23 34
',' (44) 23
':' (58) 28 30
';' (59) 11 18 21 23 28 30 69
'=' (61) 44 50
'{' (123) 1 11 13 15 17 34 36
'}' (125) 1 11 13 15 17 34 36
error (256)
VOID (258) 9
SWITCH (259) 17
CASE (260) 28
BREAK (261) 28 30
DEFAULT (262) 30
WHILE (263) 13
CHARACTER (264) 66
PRINTFF (265) 21
SCANFF (266) 23
INT (267) 6
FLOAT (268) 7
CHAR (269) 8
FOR (270) 11
IF (271) 15
ELSE (272) 36
TRUE (273) 39
FALSE (274) 40
NUMBER (275) 25 28 64
FLOAT_NUM (276) 65
ID (277) 5 23 26 42 44 46 48 49 67
LE (278) 60
GE (279) 61
EQ (280) 62
NE (281) 63
GT (282) 59
LT (283) 58
AND (284)
OR (285)
STR (286) 21 23
ADD (287) 54
MULTIPLY (288) 56
DIVIDE (289) 57
SUBTRACT (290) 55
UNARY (291) 48 49
INCLUDE (292) 4
RETURN (293) 69
ELIF (294) 34


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1, on right: 0
headers (51)
    on left: 2 4, on right: 1 2
$@1 (52)
    on left: 3, on right: 4
vsa (53)
    on left: 5, on right: 1
datatype (54)
    on left: 6 7 8 9, on right: 5 42
body (55)
    on left: 11 13 15 17 18 19 21 23 24, on right: 1 11 13 15 19 28
    30 34 36
$@2 (56)
    on left: 10, on right: 11
$@3 (57)
    on left: 12, on right: 13
$@4 (58)
    on left: 14, on right: 15
$@5 (59)
    on left: 16, on right: 17
$@6 (60)
    on left: 20, on right: 21
$@7 (61)
    on left: 22, on right: 23
alpha (62)
    on left: 25 26, on right: 17
case (63)
    on left: 28 30, on right: 17 28
$@8 (64)
    on left: 27, on right: 28
$@9 (65)
    on left: 29, on right: 30
aux1 (66)
    on left: 31 32, on right: 11
elif (67)
    on left: 34 36 37, on right: 15 34
$@10 (68)
    on left: 33, on right: 34
$@11 (69)
    on left: 35, on right: 36
condition (70)
    on left: 38 39 40, on right: 11 13 15 34
statement (71)
    on left: 42 44 46 48 49, on right: 18 31
$@12 (72)
    on left: 41, on right: 42
$@13 (73)
    on left: 43, on right: 44
$@14 (74)
    on left: 45, on right: 46
$@15 (75)
    on left: 47, on right: 48
init (76)
    on left: 50 51, on right: 42
expression (77)
    on left: 52 53, on right: 44 46 52
arithmetic (78)
    on left: 54 55 56 57, on right: 52
relop (79)
    on left: 58 59 60 61 62 63, on right: 38 46
value (80)
    on left: 64 65 66 67, on right: 38 50 53 69
return (81)
    on left: 69, on right: 1
$@16 (82)
    on left: 68, on right: 69


state 0

    0 $accept: . program $end

    INCLUDE  shift, and go to state 1

    program  go to state 2
    headers  go to state 3


state 1

    4 headers: INCLUDE . $@1

    $default  reduce using rule 3 ($@1)

    $@1  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: headers . vsa '(' ')' '{' body return '}'
    2 headers: headers . headers

    VOID     shift, and go to state 6
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    INCLUDE  shift, and go to state 1

    headers   go to state 10
    vsa       go to state 11
    datatype  go to state 12


state 4

    4 headers: INCLUDE $@1 .

    $default  reduce using rule 4 (headers)


state 5

    0 $accept: program $end .

    $default  accept


state 6

    9 datatype: VOID .

    $default  reduce using rule 9 (datatype)


state 7

    6 datatype: INT .

    $default  reduce using rule 6 (datatype)


state 8

    7 datatype: FLOAT .

    $default  reduce using rule 7 (datatype)


state 9

    8 datatype: CHAR .

    $default  reduce using rule 8 (datatype)


state 10

    2 headers: headers . headers
    2        | headers headers .

    INCLUDE  shift, and go to state 1

    INCLUDE   [reduce using rule 2 (headers)]
    $default  reduce using rule 2 (headers)

    headers  go to state 10


state 11

    1 program: headers vsa . '(' ')' '{' body return '}'

    '('  shift, and go to state 13


state 12

    5 vsa: datatype . ID

    ID  shift, and go to state 14


state 13

    1 program: headers vsa '(' . ')' '{' body return '}'

    ')'  shift, and go to state 15


state 14

    5 vsa: datatype ID .

    $default  reduce using rule 5 (vsa)


state 15

    1 program: headers vsa '(' ')' . '{' body return '}'

    '{'  shift, and go to state 16


state 16

    1 program: headers vsa '(' ')' '{' . body return '}'

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 24 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 24 (body)]
    $default  reduce using rule 24 (body)

    datatype   go to state 25
    body       go to state 26
    statement  go to state 27


state 17

   17 body: SWITCH . $@5 '(' alpha ')' '{' case '}'

    $default  reduce using rule 16 ($@5)

    $@5  go to state 28


state 18

   13 body: WHILE . $@3 '(' condition ')' '{' body '}'

    $default  reduce using rule 12 ($@3)

    $@3  go to state 29


state 19

   21 body: PRINTFF . $@6 '(' STR ')' ';'

    $default  reduce using rule 20 ($@6)

    $@6  go to state 30


state 20

   23 body: SCANFF . $@7 '(' STR ',' '&' ID ')' ';'

    $default  reduce using rule 22 ($@7)

    $@7  go to state 31


state 21

   11 body: FOR . $@2 '(' aux1 ';' condition ';' aux1 ')' '{' body '}'

    $default  reduce using rule 10 ($@2)

    $@2  go to state 32


state 22

   15 body: IF . $@4 '(' condition ')' '{' body '}' elif

    $default  reduce using rule 14 ($@4)

    $@4  go to state 33


state 23

   44 statement: ID . $@13 '=' expression
   46          | ID . $@14 relop expression
   48          | ID . $@15 UNARY

    UNARY     reduce using rule 47 ($@15)
    '='       reduce using rule 43 ($@13)
    $default  reduce using rule 45 ($@14)

    $@13  go to state 34
    $@14  go to state 35
    $@15  go to state 36


state 24

   49 statement: UNARY . ID

    ID  shift, and go to state 37


state 25

   42 statement: datatype . ID $@12 init

    ID  shift, and go to state 38


state 26

    1 program: headers vsa '(' ')' '{' body . return '}'
   19 body: body . body

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    RETURN   shift, and go to state 39

    VOID     [reduce using rule 24 (body)]
    SWITCH   [reduce using rule 24 (body)]
    WHILE    [reduce using rule 24 (body)]
    PRINTFF  [reduce using rule 24 (body)]
    SCANFF   [reduce using rule 24 (body)]
    INT      [reduce using rule 24 (body)]
    FLOAT    [reduce using rule 24 (body)]
    CHAR     [reduce using rule 24 (body)]
    FOR      [reduce using rule 24 (body)]
    IF       [reduce using rule 24 (body)]
    ID       [reduce using rule 24 (body)]
    UNARY    [reduce using rule 24 (body)]
    RETURN   [reduce using rule 24 (body)]

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27
    return     go to state 41


state 27

   18 body: statement . ';'

    ';'  shift, and go to state 42


state 28

   17 body: SWITCH $@5 . '(' alpha ')' '{' case '}'

    '('  shift, and go to state 43


state 29

   13 body: WHILE $@3 . '(' condition ')' '{' body '}'

    '('  shift, and go to state 44


state 30

   21 body: PRINTFF $@6 . '(' STR ')' ';'

    '('  shift, and go to state 45


state 31

   23 body: SCANFF $@7 . '(' STR ',' '&' ID ')' ';'

    '('  shift, and go to state 46


state 32

   11 body: FOR $@2 . '(' aux1 ';' condition ';' aux1 ')' '{' body '}'

    '('  shift, and go to state 47


state 33

   15 body: IF $@4 . '(' condition ')' '{' body '}' elif

    '('  shift, and go to state 48


state 34

   44 statement: ID $@13 . '=' expression

    '='  shift, and go to state 49


state 35

   46 statement: ID $@14 . relop expression

    LE  shift, and go to state 50
    GE  shift, and go to state 51
    EQ  shift, and go to state 52
    NE  shift, and go to state 53
    GT  shift, and go to state 54
    LT  shift, and go to state 55

    relop  go to state 56


state 36

   48 statement: ID $@15 . UNARY

    UNARY  shift, and go to state 57


state 37

   49 statement: UNARY ID .

    $default  reduce using rule 49 (statement)


state 38

   42 statement: datatype ID . $@12 init

    $default  reduce using rule 41 ($@12)

    $@12  go to state 58


state 39

   69 return: RETURN . $@16 value ';'

    $default  reduce using rule 68 ($@16)

    $@16  go to state 59


state 40

   19 body: body . body
   19     | body body .

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 19 (body)]
    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 19 (body)]
    SWITCH    [reduce using rule 24 (body)]
    BREAK     reduce using rule 19 (body)
    BREAK     [reduce using rule 24 (body)]
    WHILE     [reduce using rule 19 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 19 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 19 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 19 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 19 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 19 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 19 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 19 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 19 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 19 (body)]
    UNARY     [reduce using rule 24 (body)]
    RETURN    reduce using rule 19 (body)
    RETURN    [reduce using rule 24 (body)]
    '}'       reduce using rule 19 (body)
    '}'       [reduce using rule 24 (body)]
    $default  reduce using rule 19 (body)

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27


state 41

    1 program: headers vsa '(' ')' '{' body return . '}'

    '}'  shift, and go to state 60


state 42

   18 body: statement ';' .

    $default  reduce using rule 18 (body)


state 43

   17 body: SWITCH $@5 '(' . alpha ')' '{' case '}'

    NUMBER  shift, and go to state 61
    ID      shift, and go to state 62

    alpha  go to state 63


state 44

   13 body: WHILE $@3 '(' . condition ')' '{' body '}'

    CHARACTER  shift, and go to state 64
    TRUE       shift, and go to state 65
    FALSE      shift, and go to state 66
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    condition  go to state 70
    value      go to state 71


state 45

   21 body: PRINTFF $@6 '(' . STR ')' ';'

    STR  shift, and go to state 72


state 46

   23 body: SCANFF $@7 '(' . STR ',' '&' ID ')' ';'

    STR  shift, and go to state 73


state 47

   11 body: FOR $@2 '(' . aux1 ';' condition ';' aux1 ')' '{' body '}'

    VOID   shift, and go to state 6
    INT    shift, and go to state 7
    FLOAT  shift, and go to state 8
    CHAR   shift, and go to state 9
    ID     shift, and go to state 23
    UNARY  shift, and go to state 24

    $default  reduce using rule 32 (aux1)

    datatype   go to state 25
    aux1       go to state 74
    statement  go to state 75


state 48

   15 body: IF $@4 '(' . condition ')' '{' body '}' elif

    CHARACTER  shift, and go to state 64
    TRUE       shift, and go to state 65
    FALSE      shift, and go to state 66
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    condition  go to state 76
    value      go to state 71


state 49

   44 statement: ID $@13 '=' . expression

    CHARACTER  shift, and go to state 64
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    expression  go to state 77
    value       go to state 78


state 50

   60 relop: LE .

    $default  reduce using rule 60 (relop)


state 51

   61 relop: GE .

    $default  reduce using rule 61 (relop)


state 52

   62 relop: EQ .

    $default  reduce using rule 62 (relop)


state 53

   63 relop: NE .

    $default  reduce using rule 63 (relop)


state 54

   59 relop: GT .

    $default  reduce using rule 59 (relop)


state 55

   58 relop: LT .

    $default  reduce using rule 58 (relop)


state 56

   46 statement: ID $@14 relop . expression

    CHARACTER  shift, and go to state 64
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    expression  go to state 79
    value       go to state 78


state 57

   48 statement: ID $@15 UNARY .

    $default  reduce using rule 48 (statement)


state 58

   42 statement: datatype ID $@12 . init

    '='  shift, and go to state 80

    $default  reduce using rule 51 (init)

    init  go to state 81


state 59

   69 return: RETURN $@16 . value ';'

    CHARACTER  shift, and go to state 64
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    value  go to state 82


state 60

    1 program: headers vsa '(' ')' '{' body return '}' .

    $default  reduce using rule 1 (program)


state 61

   25 alpha: NUMBER .

    $default  reduce using rule 25 (alpha)


state 62

   26 alpha: ID .

    $default  reduce using rule 26 (alpha)


state 63

   17 body: SWITCH $@5 '(' alpha . ')' '{' case '}'

    ')'  shift, and go to state 83


state 64

   66 value: CHARACTER .

    $default  reduce using rule 66 (value)


state 65

   39 condition: TRUE .

    $default  reduce using rule 39 (condition)


state 66

   40 condition: FALSE .

    $default  reduce using rule 40 (condition)


state 67

   64 value: NUMBER .

    $default  reduce using rule 64 (value)


state 68

   65 value: FLOAT_NUM .

    $default  reduce using rule 65 (value)


state 69

   67 value: ID .

    $default  reduce using rule 67 (value)


state 70

   13 body: WHILE $@3 '(' condition . ')' '{' body '}'

    ')'  shift, and go to state 84


state 71

   38 condition: value . relop value

    LE  shift, and go to state 50
    GE  shift, and go to state 51
    EQ  shift, and go to state 52
    NE  shift, and go to state 53
    GT  shift, and go to state 54
    LT  shift, and go to state 55

    relop  go to state 85


state 72

   21 body: PRINTFF $@6 '(' STR . ')' ';'

    ')'  shift, and go to state 86


state 73

   23 body: SCANFF $@7 '(' STR . ',' '&' ID ')' ';'

    ','  shift, and go to state 87


state 74

   11 body: FOR $@2 '(' aux1 . ';' condition ';' aux1 ')' '{' body '}'

    ';'  shift, and go to state 88


state 75

   31 aux1: statement .

    $default  reduce using rule 31 (aux1)


state 76

   15 body: IF $@4 '(' condition . ')' '{' body '}' elif

    ')'  shift, and go to state 89


state 77

   44 statement: ID $@13 '=' expression .
   52 expression: expression . arithmetic expression

    ADD       shift, and go to state 90
    MULTIPLY  shift, and go to state 91
    DIVIDE    shift, and go to state 92
    SUBTRACT  shift, and go to state 93

    $default  reduce using rule 44 (statement)

    arithmetic  go to state 94


state 78

   53 expression: value .

    $default  reduce using rule 53 (expression)


state 79

   46 statement: ID $@14 relop expression .
   52 expression: expression . arithmetic expression

    ADD       shift, and go to state 90
    MULTIPLY  shift, and go to state 91
    DIVIDE    shift, and go to state 92
    SUBTRACT  shift, and go to state 93

    $default  reduce using rule 46 (statement)

    arithmetic  go to state 94


state 80

   50 init: '=' . value

    CHARACTER  shift, and go to state 64
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    value  go to state 95


state 81

   42 statement: datatype ID $@12 init .

    $default  reduce using rule 42 (statement)


state 82

   69 return: RETURN $@16 value . ';'

    ';'  shift, and go to state 96


state 83

   17 body: SWITCH $@5 '(' alpha ')' . '{' case '}'

    '{'  shift, and go to state 97


state 84

   13 body: WHILE $@3 '(' condition ')' . '{' body '}'

    '{'  shift, and go to state 98


state 85

   38 condition: value relop . value

    CHARACTER  shift, and go to state 64
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    value  go to state 99


state 86

   21 body: PRINTFF $@6 '(' STR ')' . ';'

    ';'  shift, and go to state 100


state 87

   23 body: SCANFF $@7 '(' STR ',' . '&' ID ')' ';'

    '&'  shift, and go to state 101


state 88

   11 body: FOR $@2 '(' aux1 ';' . condition ';' aux1 ')' '{' body '}'

    CHARACTER  shift, and go to state 64
    TRUE       shift, and go to state 65
    FALSE      shift, and go to state 66
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    condition  go to state 102
    value      go to state 71


state 89

   15 body: IF $@4 '(' condition ')' . '{' body '}' elif

    '{'  shift, and go to state 103


state 90

   54 arithmetic: ADD .

    $default  reduce using rule 54 (arithmetic)


state 91

   56 arithmetic: MULTIPLY .

    $default  reduce using rule 56 (arithmetic)


state 92

   57 arithmetic: DIVIDE .

    $default  reduce using rule 57 (arithmetic)


state 93

   55 arithmetic: SUBTRACT .

    $default  reduce using rule 55 (arithmetic)


state 94

   52 expression: expression arithmetic . expression

    CHARACTER  shift, and go to state 64
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    expression  go to state 104
    value       go to state 78


state 95

   50 init: '=' value .

    $default  reduce using rule 50 (init)


state 96

   69 return: RETURN $@16 value ';' .

    $default  reduce using rule 69 (return)


state 97

   17 body: SWITCH $@5 '(' alpha ')' '{' . case '}'

    CASE     shift, and go to state 105
    DEFAULT  shift, and go to state 106

    case  go to state 107


state 98

   13 body: WHILE $@3 '(' condition ')' '{' . body '}'

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 24 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 24 (body)]
    $default  reduce using rule 24 (body)

    datatype   go to state 25
    body       go to state 108
    statement  go to state 27


state 99

   38 condition: value relop value .

    $default  reduce using rule 38 (condition)


state 100

   21 body: PRINTFF $@6 '(' STR ')' ';' .

    $default  reduce using rule 21 (body)


state 101

   23 body: SCANFF $@7 '(' STR ',' '&' . ID ')' ';'

    ID  shift, and go to state 109


state 102

   11 body: FOR $@2 '(' aux1 ';' condition . ';' aux1 ')' '{' body '}'

    ';'  shift, and go to state 110


state 103

   15 body: IF $@4 '(' condition ')' '{' . body '}' elif

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 24 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 24 (body)]
    $default  reduce using rule 24 (body)

    datatype   go to state 25
    body       go to state 111
    statement  go to state 27


state 104

   52 expression: expression . arithmetic expression
   52           | expression arithmetic expression .

    ADD       shift, and go to state 90
    MULTIPLY  shift, and go to state 91
    DIVIDE    shift, and go to state 92
    SUBTRACT  shift, and go to state 93

    ADD       [reduce using rule 52 (expression)]
    MULTIPLY  [reduce using rule 52 (expression)]
    DIVIDE    [reduce using rule 52 (expression)]
    SUBTRACT  [reduce using rule 52 (expression)]
    $default  reduce using rule 52 (expression)

    arithmetic  go to state 94


state 105

   28 case: CASE . $@8 NUMBER ':' body BREAK ';' case

    $default  reduce using rule 27 ($@8)

    $@8  go to state 112


state 106

   30 case: DEFAULT . $@9 ':' body BREAK ';'

    $default  reduce using rule 29 ($@9)

    $@9  go to state 113


state 107

   17 body: SWITCH $@5 '(' alpha ')' '{' case . '}'

    '}'  shift, and go to state 114


state 108

   13 body: WHILE $@3 '(' condition ')' '{' body . '}'
   19     | body . body

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    '}'      shift, and go to state 115

    VOID     [reduce using rule 24 (body)]
    SWITCH   [reduce using rule 24 (body)]
    WHILE    [reduce using rule 24 (body)]
    PRINTFF  [reduce using rule 24 (body)]
    SCANFF   [reduce using rule 24 (body)]
    INT      [reduce using rule 24 (body)]
    FLOAT    [reduce using rule 24 (body)]
    CHAR     [reduce using rule 24 (body)]
    FOR      [reduce using rule 24 (body)]
    IF       [reduce using rule 24 (body)]
    ID       [reduce using rule 24 (body)]
    UNARY    [reduce using rule 24 (body)]
    '}'      [reduce using rule 24 (body)]

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27


state 109

   23 body: SCANFF $@7 '(' STR ',' '&' ID . ')' ';'

    ')'  shift, and go to state 116


state 110

   11 body: FOR $@2 '(' aux1 ';' condition ';' . aux1 ')' '{' body '}'

    VOID   shift, and go to state 6
    INT    shift, and go to state 7
    FLOAT  shift, and go to state 8
    CHAR   shift, and go to state 9
    ID     shift, and go to state 23
    UNARY  shift, and go to state 24

    $default  reduce using rule 32 (aux1)

    datatype   go to state 25
    aux1       go to state 117
    statement  go to state 75


state 111

   15 body: IF $@4 '(' condition ')' '{' body . '}' elif
   19     | body . body

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    '}'      shift, and go to state 118

    VOID     [reduce using rule 24 (body)]
    SWITCH   [reduce using rule 24 (body)]
    WHILE    [reduce using rule 24 (body)]
    PRINTFF  [reduce using rule 24 (body)]
    SCANFF   [reduce using rule 24 (body)]
    INT      [reduce using rule 24 (body)]
    FLOAT    [reduce using rule 24 (body)]
    CHAR     [reduce using rule 24 (body)]
    FOR      [reduce using rule 24 (body)]
    IF       [reduce using rule 24 (body)]
    ID       [reduce using rule 24 (body)]
    UNARY    [reduce using rule 24 (body)]
    '}'      [reduce using rule 24 (body)]

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27


state 112

   28 case: CASE $@8 . NUMBER ':' body BREAK ';' case

    NUMBER  shift, and go to state 119


state 113

   30 case: DEFAULT $@9 . ':' body BREAK ';'

    ':'  shift, and go to state 120


state 114

   17 body: SWITCH $@5 '(' alpha ')' '{' case '}' .

    $default  reduce using rule 17 (body)


state 115

   13 body: WHILE $@3 '(' condition ')' '{' body '}' .

    $default  reduce using rule 13 (body)


state 116

   23 body: SCANFF $@7 '(' STR ',' '&' ID ')' . ';'

    ';'  shift, and go to state 121


state 117

   11 body: FOR $@2 '(' aux1 ';' condition ';' aux1 . ')' '{' body '}'

    ')'  shift, and go to state 122


state 118

   15 body: IF $@4 '(' condition ')' '{' body '}' . elif

    ELSE  shift, and go to state 123
    ELIF  shift, and go to state 124

    $default  reduce using rule 37 (elif)

    elif  go to state 125


state 119

   28 case: CASE $@8 NUMBER . ':' body BREAK ';' case

    ':'  shift, and go to state 126


state 120

   30 case: DEFAULT $@9 ':' . body BREAK ';'

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 24 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 24 (body)]
    $default  reduce using rule 24 (body)

    datatype   go to state 25
    body       go to state 127
    statement  go to state 27


state 121

   23 body: SCANFF $@7 '(' STR ',' '&' ID ')' ';' .

    $default  reduce using rule 23 (body)


state 122

   11 body: FOR $@2 '(' aux1 ';' condition ';' aux1 ')' . '{' body '}'

    '{'  shift, and go to state 128


state 123

   36 elif: ELSE . $@11 '{' body '}'

    $default  reduce using rule 35 ($@11)

    $@11  go to state 129


state 124

   34 elif: ELIF . $@10 '(' condition ')' '{' body '}' elif

    $default  reduce using rule 33 ($@10)

    $@10  go to state 130


state 125

   15 body: IF $@4 '(' condition ')' '{' body '}' elif .

    $default  reduce using rule 15 (body)


state 126

   28 case: CASE $@8 NUMBER ':' . body BREAK ';' case

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 24 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 24 (body)]
    $default  reduce using rule 24 (body)

    datatype   go to state 25
    body       go to state 131
    statement  go to state 27


state 127

   19 body: body . body
   30 case: DEFAULT $@9 ':' body . BREAK ';'

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    BREAK    shift, and go to state 132
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID     [reduce using rule 24 (body)]
    SWITCH   [reduce using rule 24 (body)]
    BREAK    [reduce using rule 24 (body)]
    WHILE    [reduce using rule 24 (body)]
    PRINTFF  [reduce using rule 24 (body)]
    SCANFF   [reduce using rule 24 (body)]
    INT      [reduce using rule 24 (body)]
    FLOAT    [reduce using rule 24 (body)]
    CHAR     [reduce using rule 24 (body)]
    FOR      [reduce using rule 24 (body)]
    IF       [reduce using rule 24 (body)]
    ID       [reduce using rule 24 (body)]
    UNARY    [reduce using rule 24 (body)]

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27


state 128

   11 body: FOR $@2 '(' aux1 ';' condition ';' aux1 ')' '{' . body '}'

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 24 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 24 (body)]
    $default  reduce using rule 24 (body)

    datatype   go to state 25
    body       go to state 133
    statement  go to state 27


state 129

   36 elif: ELSE $@11 . '{' body '}'

    '{'  shift, and go to state 134


state 130

   34 elif: ELIF $@10 . '(' condition ')' '{' body '}' elif

    '('  shift, and go to state 135


state 131

   19 body: body . body
   28 case: CASE $@8 NUMBER ':' body . BREAK ';' case

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    BREAK    shift, and go to state 136
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID     [reduce using rule 24 (body)]
    SWITCH   [reduce using rule 24 (body)]
    BREAK    [reduce using rule 24 (body)]
    WHILE    [reduce using rule 24 (body)]
    PRINTFF  [reduce using rule 24 (body)]
    SCANFF   [reduce using rule 24 (body)]
    INT      [reduce using rule 24 (body)]
    FLOAT    [reduce using rule 24 (body)]
    CHAR     [reduce using rule 24 (body)]
    FOR      [reduce using rule 24 (body)]
    IF       [reduce using rule 24 (body)]
    ID       [reduce using rule 24 (body)]
    UNARY    [reduce using rule 24 (body)]

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27


state 132

   30 case: DEFAULT $@9 ':' body BREAK . ';'

    ';'  shift, and go to state 137


state 133

   11 body: FOR $@2 '(' aux1 ';' condition ';' aux1 ')' '{' body . '}'
   19     | body . body

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    '}'      shift, and go to state 138

    VOID     [reduce using rule 24 (body)]
    SWITCH   [reduce using rule 24 (body)]
    WHILE    [reduce using rule 24 (body)]
    PRINTFF  [reduce using rule 24 (body)]
    SCANFF   [reduce using rule 24 (body)]
    INT      [reduce using rule 24 (body)]
    FLOAT    [reduce using rule 24 (body)]
    CHAR     [reduce using rule 24 (body)]
    FOR      [reduce using rule 24 (body)]
    IF       [reduce using rule 24 (body)]
    ID       [reduce using rule 24 (body)]
    UNARY    [reduce using rule 24 (body)]
    '}'      [reduce using rule 24 (body)]

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27


state 134

   36 elif: ELSE $@11 '{' . body '}'

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 24 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 24 (body)]
    $default  reduce using rule 24 (body)

    datatype   go to state 25
    body       go to state 139
    statement  go to state 27


state 135

   34 elif: ELIF $@10 '(' . condition ')' '{' body '}' elif

    CHARACTER  shift, and go to state 64
    TRUE       shift, and go to state 65
    FALSE      shift, and go to state 66
    NUMBER     shift, and go to state 67
    FLOAT_NUM  shift, and go to state 68
    ID         shift, and go to state 69

    condition  go to state 140
    value      go to state 71


state 136

   28 case: CASE $@8 NUMBER ':' body BREAK . ';' case

    ';'  shift, and go to state 141


state 137

   30 case: DEFAULT $@9 ':' body BREAK ';' .

    $default  reduce using rule 30 (case)


state 138

   11 body: FOR $@2 '(' aux1 ';' condition ';' aux1 ')' '{' body '}' .

    $default  reduce using rule 11 (body)


state 139

   19 body: body . body
   36 elif: ELSE $@11 '{' body . '}'

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    '}'      shift, and go to state 142

    VOID     [reduce using rule 24 (body)]
    SWITCH   [reduce using rule 24 (body)]
    WHILE    [reduce using rule 24 (body)]
    PRINTFF  [reduce using rule 24 (body)]
    SCANFF   [reduce using rule 24 (body)]
    INT      [reduce using rule 24 (body)]
    FLOAT    [reduce using rule 24 (body)]
    CHAR     [reduce using rule 24 (body)]
    FOR      [reduce using rule 24 (body)]
    IF       [reduce using rule 24 (body)]
    ID       [reduce using rule 24 (body)]
    UNARY    [reduce using rule 24 (body)]
    '}'      [reduce using rule 24 (body)]

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27


state 140

   34 elif: ELIF $@10 '(' condition . ')' '{' body '}' elif

    ')'  shift, and go to state 143


state 141

   28 case: CASE $@8 NUMBER ':' body BREAK ';' . case

    CASE     shift, and go to state 105
    DEFAULT  shift, and go to state 106

    case  go to state 144


state 142

   36 elif: ELSE $@11 '{' body '}' .

    $default  reduce using rule 36 (elif)


state 143

   34 elif: ELIF $@10 '(' condition ')' . '{' body '}' elif

    '{'  shift, and go to state 145


state 144

   28 case: CASE $@8 NUMBER ':' body BREAK ';' case .

    $default  reduce using rule 28 (case)


state 145

   34 elif: ELIF $@10 '(' condition ')' '{' . body '}' elif

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    VOID      [reduce using rule 24 (body)]
    SWITCH    [reduce using rule 24 (body)]
    WHILE     [reduce using rule 24 (body)]
    PRINTFF   [reduce using rule 24 (body)]
    SCANFF    [reduce using rule 24 (body)]
    INT       [reduce using rule 24 (body)]
    FLOAT     [reduce using rule 24 (body)]
    CHAR      [reduce using rule 24 (body)]
    FOR       [reduce using rule 24 (body)]
    IF        [reduce using rule 24 (body)]
    ID        [reduce using rule 24 (body)]
    UNARY     [reduce using rule 24 (body)]
    $default  reduce using rule 24 (body)

    datatype   go to state 25
    body       go to state 146
    statement  go to state 27


state 146

   19 body: body . body
   34 elif: ELIF $@10 '(' condition ')' '{' body . '}' elif

    VOID     shift, and go to state 6
    SWITCH   shift, and go to state 17
    WHILE    shift, and go to state 18
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    '}'      shift, and go to state 147

    VOID     [reduce using rule 24 (body)]
    SWITCH   [reduce using rule 24 (body)]
    WHILE    [reduce using rule 24 (body)]
    PRINTFF  [reduce using rule 24 (body)]
    SCANFF   [reduce using rule 24 (body)]
    INT      [reduce using rule 24 (body)]
    FLOAT    [reduce using rule 24 (body)]
    CHAR     [reduce using rule 24 (body)]
    FOR      [reduce using rule 24 (body)]
    IF       [reduce using rule 24 (body)]
    ID       [reduce using rule 24 (body)]
    UNARY    [reduce using rule 24 (body)]
    '}'      [reduce using rule 24 (body)]

    datatype   go to state 25
    body       go to state 40
    statement  go to state 27


state 147

   34 elif: ELIF $@10 '(' condition ')' '{' body '}' . elif

    ELSE  shift, and go to state 123
    ELIF  shift, and go to state 124

    $default  reduce using rule 37 (elif)

    elif  go to state 148


state 148

   34 elif: ELIF $@10 '(' condition ')' '{' body '}' elif .

    $default  reduce using rule 34 (elif)
